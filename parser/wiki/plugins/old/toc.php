<?phpif (!defined('INC_PATH')) {
	define ('INC_PATH', realpath(dirname(__FILE__).'/../../').'/');
}
require_once INC_PATH.'piwo-v0.2/lib/common.php';

function plugin_nstoc(Parser $parser, Node $node) {		$token = new ParserRule($node, $parser);	$cont = $token->getArrayFromNode($node);	$curID = pw_wiki_getid();		//TODO errors should bubble up	//TODO Title should be of the form TITLE=string...	try {		$id = new WikiID(isset($cont[1]) && WikiID::isValidAndAbsolute($cont[1]) ? $cont[1] : $curID->getFullNS());		TestingTools::inform($id->getFullNS());	} catch (Exception $e) {		return nop($e->getMessage());	}			// Parameter TITLE: Print Title	$titeltxt = "";	//TODO do not use position 0 and 1 of the array (1 is the title string)	if (in_array("TITLE", $cont)) {		$titeltxt = utf8_ucwords(str_replace(":", " &raquo; ", $id->isRootNS() ? "[root]" : trim($id->getFullNS(), ":")));		$titeltxt = "Content of namespace <i>\"$titeltxt\"</i>: ";	}	
		// Parameter NOERR: Do not show error messages!	return pw_wiki_nstoc($titeltxt, in_array("NOERR", $cont));}function pw_wiki_nstoc($titel, $error) {		$id = pw_wiki_getid();	$path = WIKISTORAGE.$id->getFullNSPath();		$wikiFiles = array_merge(glob($path."*/", GLOB_ONLYDIR), glob($path."*".WIKIFILEEXT));	sort($wikiFiles);	// 	TestingTools::inform($wikiFiles);	// Titel werden nur ausgegeben, wenn Fehlermeldungen auch ausgegeben werden dÃ¼rfen!	// ...sonst kann es zu alleinstehenden Titeln kommen.	$out = "";
	if (utf8_strlen($titel) > 0) {		$out .= $titel;	}	if($error && empty($wikiFiles)) {		return $out."<br />".nop("There are no pages in the namespace '".pw_s2e($id->getFullNS())."'.", false);	}		$out .= "<ul>";	$uniqueWikiLinks = array();	foreach($wikiFiles as $file) {		$curId = WikiID::fromPath($file, WIKISTORAGE, WIKIFILEEXT);		if($curId->getPage() == WIKINSDEFAULTPAGE) {			continue;		}		if($curId->isNS()) {			$url = $curId->getFullNSAsUrl();			$name = $curId->getNS();		} else {			$url = $curId->getIDAsUrl();			$name = $curId->getPage();		}		//TestingTools::inform($name);
				if(!in_array($name, $uniqueWikiLinks)) {			$out .= "<li><a href='?id=".$url."'>".pw_s2e(utf8_ucfirst($name))."</a></li>";// 			TestingTools::inform($curId);			$uniqueWikiLinks[] = $name;		}	}	$out .= "</ul>";	//  	TestingTools::inform($uniqueWikiLinks);	return $out;}
?>